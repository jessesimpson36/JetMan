<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shadow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
Replay_Variables("replay");
grav = 0.2;
fric = 0.05;
hsp = 0;
vsp = 0;
hlaunchspeed = 3;
vlaunchspeed = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>getInputs();
//Limit the object's speed
if (hspeed &gt; 9) hspeed = 9;
if (hspeed &lt; -9) hspeed = -9;
if (vspeed &lt; -15) vspeed = -15;

//Retrieve the player's input
key_left = -keyboardCheckLeft;
key_right = keyboardCheckRight;
key_up = -keyboardCheckUp;
key_down = keyboardCheckDown;
//set up movement
hmove = key_left + key_right;
vumove = key_up;
vdmove = key_down;

hsp = hmove * hlaunchspeed;
vusp = vumove * vlaunchspeed;
vdsp = vdmove;

if (vspeed &lt; 9) vspeed += grav;

//Horizontal Collisions
if (place_meeting(x+hspeed,y,obj_block))
{
    while(!place_meeting(x+sign(hspeed),y,obj_block))
    {
        x += sign(hspeed);
    }
    if(place_meeting(x+sign(hsp),y,obj_block))
    {
        hsp = 0;
    }
    hspeed = 0;
}
//Vertical Collisions
if (place_meeting(x,y+vspeed,obj_block))
{
    while(!place_meeting(x,y+sign(vspeed),obj_block))
    {
        y += sign(vspeed);
    }
    if(place_meeting(x,y+sign(vusp),obj_block))
    {
        vusp = 0;
    }
    vspeed = 0;
}

//Hazard Collisions
if (place_meeting(x, y, obj_spike))
{
    instance_destroy();
}

//Dump hspeed
if(place_meeting(x, y+vdsp, obj_block))
{
    hspeed = 0;
}

//Friction
if(place_meeting(x, y+1, obj_block))
{
    if(hspeed != 0)
    {
    hspeed -= fric*sign(hspeed);
    }
}
if(place_meeting(x-1, y, obj_block) || place_meeting(x+1, y, obj_block))
{
    if(vspeed != 0)
    {
    vspeed -= fric*sign(vspeed);
    }
}

//Prevent the object from leaving the room
x = min (x, room_width-32);
x = max (x, 32);
y = min(y, room_height-32);
y = max(y, 32);

//Movement
if(!place_meeting(x+hsp,y,obj_block))
{
    hspeed += hsp;
}
if(!place_meeting(x,y+vusp,obj_block))
{
    vspeed += vusp;
}

//Animate
if(hmove != 0) image_xscale = sign(hmove);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
